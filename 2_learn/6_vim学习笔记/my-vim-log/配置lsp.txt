lsp client 也就是lsp客户端已经在nvim里面集成了.
所以我们现在需要一个config来配置这个客户端.
"lspconfig"

lsp还需要一个语言服务器.
语言服务器可以通过mason插件来下载.

下载之后, 还要再lspconfig这个插件的配置文件里面写上启动项才行.
就是setup{}

每一个语言服务器里面都是可以单独配置的.
也可以为他们配置一个只在buffer区运行这个语言服务器的时候才会执行的快捷键映射

可以在lsp本身的文档里面查找到可以映射什么函数来实现什么样的功能,但是用文字描述
功能实在是太抽象了.所以有时间就好好地试一遍这些功能.

在lspconfig的文档里面只有一些配置用的东西,都用不到.
里面有个配置文件的基本模板,也复制到自己的配置文件上了.

语言服务器自己也是有文档的, 可以在lspconfig的文档目录下面看到, 或者直接跳转
到对应语言服务器自己的github里面, 找对应的文档来读.
里面主要是讲一些额外的功能实现.
不过lua可以通过配置全局变量vim来消除那个vim找不到定义的警告.

关于lsp本身还是可以进行配置的, 但是文档里面没有详细描述怎么配置.
找了一个大佬的配置了一个handlers, 可以改变一下lsp的显示效果.
至于其他的, 只能等以后再慢慢琢磨了.

吐血了, 配置了那个lsp clangd
这个鬼玩意好复杂
他说是要依赖一个json文件来进行查询
但是, 我写了json文件, 结果还是找不到头文件

更离谱的是, 我把头文件直接放在他的目录下, 结果还是提示找不到这个头文件
估计是编辑器里面运行的clangd有运行检查的过程, 运行检查的时候传入了一个奇怪的参数
导致他找不到我的头文件. 补全倒是可以补全, 只要把文件放在他底下就可以进行补全了, 但是他却提示找不到...

问题已经解决力, 妈的, 弄了差不多八个小时, 给我整怕了.
这个clangd是一个用来代码提示的前端, 其实clang是一个工具集,里面还可以用来编译的
然后就是可以用一个json文件来进行配置, 让项目里面的代码按照规定去检索相应的类库.
但是我只是想写个文件而已, 所以只是用一个txt小文件就可以了.

传进去一个参数, 然后指定一下头文件在哪.

没想到这些头文件... 竟然还有重名的, 不过总算是发现实际要用的是哪个.

但是每一个这么弄的话就十分麻烦了啊.
因为都要添加一个文件...
补全会显示的东西好像依赖于在data目录下的那些头文件

等等, 我直接把gcc下那个巨多的include文件夹里面的所有东西都拖进去data栏那里,不就可以了吗. 这样子就不用写那些数据库文件了.

而且我写c语言也不是搞大工程, 也就不去弄明白这些库有什么用了. 先这样吧, 能用来写c就行.


总算是告一段落了, 虽然c语言不是经常用, 但是现在可以流畅的用vim来写c语言了. 当然,只能是轻度使用, 如果是专业程度的写c语言的话, 我感觉这个vim在某些地方顶不住. 因为clangd的配置我现在只是把一堆的库都弄在了一个地方. 如果要自己写c语言的话, 编译器还有那些库, 都是要自己考虑的吧.

不知道以后写c++的时候会不会遇到这种麻烦事...
追求性能的话, 最后还是会用回c++的, 所以这里用c语言也算为后面铺路了.
要记住的是, clangd依赖于一个json文件, 但是这个json文件我不知道怎么用, 虽然有xmake, cmake工具来生成, 但是目前来说用不着. 等用到c++的时候再回来搞这个玩意.
也有可能, 我用不到c++了.
如果不行的话, 可以在用那个txt文件, 也就是flag, 来索引一下头文件的目录, 避免找不到头文件.

















